Holism~Programming constructs~Source code~Subroutines~
||||||
Function (computer programming)
||||||
In computer programming, a function or subroutine (when it doesn't return a value) is a sequence of program instructions that performs a specific task, packaged as a unit. This unit can then be used in programs wherever that particular task should be performed.
Functions may be defined within programs, or separately in libraries that can be used by many programs.  In different programming languages, a function may be called a routine, subprogram, subroutine, method, or procedure. Technically, these terms all have different definitions, and the nomenclature varies from language to language. The generic umbrella term callable unit is sometimes used.A function is often coded so that it can be started several times and from several places during one execution of the program, including from other functions, and then branch back (return) to the next instruction after the call, once the function's task is done.
The idea of a function was initially conceived by John Mauchly during his work on ENIAC, and recorded in a January 1947 Harvard symposium on "Preparation of Problems for EDVAC-type Machines". Maurice Wilkes, David Wheeler, and Stanley Gill are generally credited with the formal invention of this concept, which they termed a closed sub-routine, contrasted with an open subroutine or macro. However, Alan Turing had discussed functions in a paper of 1945 on design proposals for the NPL ACE, going so far as to invent the concept of a return address stack.Functions are a powerful programming tool, and the syntax of many programming languages includes support for writing and using them. Judicious use of functions (for example, through the structured programming approach) will often substantially reduce the cost of developing and maintaining a large program, while increasing its quality and reliability. Functions, often collected into libraries, are an important mechanism for sharing and trading software. The discipline of object-oriented programming is based on objects and methods (which are functions attached to these objects or object classes).
In the compiling method called threaded code, the executable program is basically a sequence of function calls.